name: Build and Release

on:
  push:
    branches: [ main ]

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Get version from code
        id: version
        shell: bash
        run: |
          VERSION=$(python -c "import re; content = open('cyberdriver.py', encoding='utf-8').read(); print(re.search(r'VERSION = \"(.+?)\"', content).group(1))")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  create-release:
    runs-on: ubuntu-latest
    needs: get-version
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          release_name: v${{ needs.get-version.outputs.version }}
          draft: false
          prerelease: true
          body: |
            Cyberdriver v${{ needs.get-version.outputs.version }}
            
            ### Changes
            ${{ github.event.head_commit.message }}

  build:
    needs: [get-version, create-release]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-windows.txt
          pip install pyinstaller
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Build executable
        run: |
          pyinstaller cyberdriver.spec
      - name: Prepare artifact info
        id: artifact
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "asset_path=dist/cyberdriver.exe" >> $GITHUB_OUTPUT
            echo "asset_name=cyberdriver.exe" >> $GITHUB_OUTPUT
          else
            ARCH=$(uname -m)
            (cd dist && zip -9 "cyberdriver-macos-${ARCH}.zip" cyberdriver)
            echo "asset_path=dist/cyberdriver-macos-${ARCH}.zip" >> $GITHUB_OUTPUT
            echo "asset_name=cyberdriver-macos-${ARCH}.zip" >> $GITHUB_OUTPUT
          fi
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.artifact.outputs.asset_path }}
          asset_name: ${{ steps.artifact.outputs.asset_name }}
          asset_content_type: application/octet-stream